#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "bufferReferences.glsl"
#include "structs.h"
#include "formats.h"
#include "bindlessLayouts.glsl"
#include "common.glsl"
#include "lighting.glsl"
#include "debug.glsl"
#include "ddgi_common.glsl"
#define RAYTRACE_DDGI_VOLUMES
#include "ddgi_sampling.glsl"
#include "ddgi_push_constants.h"

layout(location = 0) rayPayloadEXT PackedPayload pld;
//layout(location = 0) rayPayloadEXT Payload payload;

layout(set = 0, binding = 5) uniform accelerationStructureEXT accelerationStructures[ACC_COUNT];

layout(constant_id = 1) const uint renderTargetImageWidthBits = 10;
layout(constant_id = 2) const uint renderTargetImageFormat = R16G16B16A16F;
layout(constant_id = 3) const uint numRows = 1;
layout(constant_id = 4) const bool dynamicRayAllocationEnabled = false;


layout(buffer_reference, std430, buffer_reference_align = 8) writeonly buffer RenderBufferHalf {
	uvec2 d[]; 
};
layout(buffer_reference, std430, buffer_reference_align = 8) writeonly buffer RenderBuffer {
	vec4 d[]; 
};


//#define SHADOW_RAY_PAYLOAD_LOCATION 1 Optional for different locations
#include "raytrace_lighting.glsl"

uint binary_search(in DDGIVolume volume, in uint readOffset, in uint searchValue) 
{
    uint L = 0;
    uint R = readOffset;
    while (L < R) {
        uint m = (L+R) >> 1;
        if(readUInts[volume.dynamicRayBufferBinding].u[readOffset + m] < searchValue)
            L = m + 1;
        else
            R = m;
    }
    return L;
}

void main()
{
    //gl_LaunchIDEXT.xy;
    Scene scene = scenes[pushConstants.constants.sceneBinding].scene;
    DDGIVolume volume = ddgiVolumes[pushConstants.constants.ddgiBinding].volume[pushConstants.constants.ddgiIndex];
    uint probeCount = volume.probeCountX * volume.probeCountY * volume.probeCountZ;

    const uvec2 launchIdx = uvec2(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y);
    uint globalRayIdx = launchIdx.x + (launchIdx.y << renderTargetImageWidthBits);
        
    uint rayIdx = 0;
    uint probeIdx = 0;
	if(dynamicRayAllocationEnabled) {
        probeIdx = binary_search(volume, probeCount, globalRayIdx) - 1;
        rayIdx = globalRayIdx - readUInts[volume.dynamicRayBufferBinding].u[probeCount + probeIdx];
    } 
    else 
    {
        rayIdx  = globalRayIdx % volume.raysPerProbe;
        probeIdx = globalRayIdx / volume.raysPerProbe;
    }
        
    vec3 probeCords = get_probe_coordinates(probeIdx, volume);
    vec3 direction = get_ray_direction(pushConstants.constants.randomRotation, rayIdx, volume.raysPerProbe, volume);

    uint  rayFlags = gl_RayFlagsNoneEXT;
    float tMin     = 0.001;
    float tMax     = volume.maxRayDistance;
    traceRayEXT(accelerationStructures[pushConstants.constants.accBinding], // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            probeCords.xyz, // ray origin
            tMin,           // ray min range
            direction.xyz,  // ray direction
            tMax,           // ray max range
            0               // payload (location = 0)
        );
	Payload payload = unpack_payload(pld);

	vec3 diffuse = vec3(0.f);
	vec3 specular = vec3(0.f);

	float hitDistance = payload.hitT;

	if(payload.hitkind == gl_HitKindBackFacingTriangleEXT  ) 
	{
	    hitDistance *= DDGIBackfaceFactor;
	}
    else if ((volume.relocationEnabled == 0) || rayIdx > volume.fixedRayCount || (volume.biasedEstimator == 0) ) {
    //else {
	    if(payload.hitkind == HitKindMiss) 
	    {
		    diffuse = payload.albedo;
	    } 
	    else {
            ShadingData shadingData;
            shadingData.albedo = payload.albedo;
            shadingData.alpha = payload.roughness;
            shadingData.outLightDir = -direction;
            shadingData.metalness = payload.metallic;
            shadingData.shadingNormal = payload.shadingNormal;
            shadingData.worldPos = payload.worldPos;
            //High compile time here
            //Probable cause was loop end condition in an SSBO
		    diffuse_direct_lighting(accelerationStructures[pushConstants.constants.accBinding], scene, shadingData, diffuse, specular);
            //diffuse += specular;
            //diffuse += payload.emissive * (1.f / ((payload.hitT* payload.hitT + 1) * 3.1415926f));
            //diffuse += payload.emissive* (1.f / 3.1415926f);
            diffuse += payload.emissive;
            diffuse += diffuse_indirect_lighting(volume, shadingData
            #ifdef RAYTRACE_DDGI_VOLUMES
                , accelerationStructures[pushConstants.constants.accBinding]
			#endif
            );
        }
    }
     
    float maxRayDist = get_volume_max_distance(volume); //Get maximum possible distance
    //hitDistance = clamp(hitDistance, -65504.f, 65504.f) ;
    hitDistance = hitDistance / maxRayDist;//Normalize since moments need more accuracy and we have more accuracy in [0;1]
    if(renderTargetImageFormat == R16G16B16A16F) //Not sure if necessary or it gets clamped anyways
        hitDistance = clamp(hitDistance, -65504.f, 65504.f);
    //hitDistance = min(hitDistance, 65504.f);

    hitDistance = clamp(hitDistance, DDGIBackfaceFactor, 1.f);
    #ifdef DEBUG_COLORS
    diffuse = debugColors[probeIdx % debugColors.length()].xyz;
    #endif
    

    if(renderTargetImageFormat == R16G16B16A16F) {
        RenderBufferHalf renderBuffer = RenderBufferHalf(pushConstants.constants.renderBufferAddress);
        renderBuffer.d[globalRayIdx] = uvec2(packHalf2x16(diffuse.xy), packHalf2x16(vec2(diffuse.z, hitDistance)));
    }
    else if(renderTargetImageFormat == R32G32B32A32F) {
        RenderBuffer renderBuffer = RenderBuffer(pushConstants.constants.renderBufferAddress);
        renderBuffer.d[globalRayIdx] = vec4(diffuse, hitDistance);
    }
}