#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_shader_atomic_float : enable
#include "bufferReferences.glsl"
#include "structs.h"
#include "formats.h"
#include "bindlessLayouts.glsl"
#include "common.glsl"
#include "debug.glsl"
#include "ddgi_common.glsl"
#include "packing.glsl"
#include "ddgi_push_constants.h"
#include "multiscaleMeanEstimator.glsl"

layout(local_size_x_id = 1) in;
layout(local_size_y_id = 2) in;
layout(local_size_z_id = 3) in;
layout(constant_id = 4) const uint maxRayCount = 64;
layout(constant_id = 5) const bool filterIrradiance = false;
layout(constant_id = 6) const uint renderTargetImageFormat = R16G16B16A16F;
layout(constant_id = 7) const uint imageFormat = R16G16B16A16F;
layout(constant_id = 8) const uint renderTargetImageWidthBits = 10;
layout(constant_id = 9) const uint subgroupSize = 32;
layout(constant_id = 10) const bool dynamicRayAllocationEnabled = false;
layout(constant_id = 11) const uint usedEstimator = 0;

shared vec3 rayDirection[maxRayCount];
shared vec3 rayRadiance[maxRayCount * (filterIrradiance? 1: 0) + (filterIrradiance? 0: 1)]; //zero sized arrays are apparently not valid SPIR-V
shared float rayDistance[maxRayCount];
shared float probeBlendFactor; //Unclear whether coherent is needed

layout(buffer_reference, std430, buffer_reference_align = 8) readonly buffer RenderBufferHalf {
	uvec2 d[]; 
};
layout(buffer_reference, std430, buffer_reference_align = 8) readonly buffer RenderBuffer {
	vec4 d[]; 
};


//#define DEBUG_COLORS
void main()
{
	DDGIVolume volume = ddgiVolumes[pushConstants.constants.ddgiBinding].volume[pushConstants.constants.ddgiIndex];
	uint probeIdx = get_probe_index(gl_WorkGroupID, volume);
	uint probeCount = volume.probeCountX * volume.probeCountY * volume.probeCountZ;

	vec2 uv = vec2(0);
	if(filterIrradiance)
		uv = get_normalized_octahedral_coords(ivec2(gl_LocalInvocationID.xy), int(volume.irradianceProbeSize));
	else
		uv = get_normalized_octahedral_coords(ivec2(gl_LocalInvocationID.xy), int(volume.depthProbeSize));

	vec3 texelDir = get_octahedral_direction(uv);

	uint globalRayBeginIdx = probeIdx * volume.raysPerProbe;
	uint rayCount = maxRayCount;
	if(dynamicRayAllocationEnabled) {
        uint probeBegin = readUInts[volume.dynamicRayBufferBinding].u[probeCount + probeIdx];
		uint probeEnd = readUInts[volume.dynamicRayBufferBinding].u[probeCount + probeIdx + 1];
		rayCount = min(int(probeEnd - probeBegin), int(maxRayCount));
		globalRayBeginIdx = probeBegin;
	}
	const float inverseTotalProbeSize = 1.f / float(gl_WorkGroupSize.x * gl_WorkGroupSize.y);
	const int iMax = int(ceil(float(rayCount) * inverseTotalProbeSize));
	const int offset = int(gl_LocalInvocationIndex)* iMax;
	//float maxRayDist = length(get_volume_spacing(volume)) * 2.f;
	for(int i = 0; i < iMax; i++) {
		const int rayIdx = offset + i;
		//const int rayIdx = int(gl_LocalInvocationIndex) + i * int(gl_WorkGroupSize.x * gl_WorkGroupSize.y); //Coalesced reads apparently not as important for texture reads, maybe investigate buffers
		if(rayIdx >= rayCount) break;
		
		rayDirection[rayIdx] = get_ray_direction(pushConstants.constants.randomRotation, rayIdx, volume.raysPerProbe, volume);
		vec4 data = vec4(0);
		
		uint globalRayIdx = globalRayBeginIdx + rayIdx;

		if(renderTargetImageFormat == R16G16B16A16F) {
			RenderBufferHalf renderBuffer = RenderBufferHalf(pushConstants.constants.renderBufferAddress);
			uvec2 tmp = renderBuffer.d[globalRayIdx];
			data = vec4(unpackHalf2x16(tmp.x), unpackHalf2x16(tmp.y)) ;
		}
		else if(renderTargetImageFormat == R32G32B32A32F) {
			RenderBuffer renderBuffer = RenderBuffer(pushConstants.constants.renderBufferAddress);
			data = renderBuffer.d[globalRayIdx];
		}
		if(filterIrradiance)
			rayRadiance[rayIdx] = data.xyz;
		rayDistance[rayIdx] = data.w;// *maxRayDist;
	}
	probeBlendFactor = 0.f;
	barrier();

	
	vec4 biasedResult = vec4(0.f);
	//if (filterIrradiance && (volume.biasedEstimator != 0)){
	if (filterIrradiance){
		for(int rayIdx = 0; rayIdx < volume.fixedRayCount; rayIdx++) {
			vec3 rayDir = rayDirection[rayIdx];
			float weight = max(0.f, dot(rayDir, texelDir));
			biasedResult.w += weight;
			vec3 rayRadiance = rayRadiance[rayIdx];
			biasedResult.xyz += rayRadiance * weight;
		}
		float epsilon = float(volume.fixedRayCount) * 1e-9f;
		float weightNormalization = 1.f/ (max(biasedResult.w, epsilon));
		biasedResult.xyz *= weightNormalization;
	}

	vec4 result = vec4(0.f, 0.f, 0.f, 1.f);
	//vec4 result2 = vec4(0.f, 0.f, 0.f, 1.f);
	float resultWeight = 0.f;
	int rayIdx = 0;
	if ((volume.relocationEnabled != 0) || (volume.classificationEnabled != 0))
    {
		//Biased
        rayIdx = int(volume.fixedRayCount);
    }
	uint backfaceCount = 0;
	uint backfaceThreshold = uint(uint( rayCount - rayIdx) * volume.backfaceThreshold);

	for(; rayIdx < rayCount; rayIdx++) {

		vec3 rayDir = rayDirection[rayIdx];
		float rayDist = rayDistance[rayIdx];

		float weight = max(0.f, dot(rayDir, texelDir));


		if(filterIrradiance) {
			if(rayDist < 0.f){
				++backfaceCount;
				if( backfaceCount > backfaceThreshold)
				{
					result.xyz = vec3(0.f);
					break;
					//return;
				}
				continue;
			}
			vec3 rayRadiance = rayRadiance[rayIdx];
			result += vec4(rayRadiance * weight, 0.f);
		}
		else {
			weight = step(pow(weight, volume.depthExponent), 0.8);
			//weight = step(weight, 0.9);
			rayDist = min(abs(rayDist), 1.5);
			const float rayDistSqarred = rayDist * rayDist;
			vec4 tmpResult = vec4(rayDist, rayDistSqarred, rayDistSqarred * rayDist, rayDistSqarred * rayDistSqarred);
			result += tmpResult * weight;
			//result2 += vec4(tmpResult.w * rayDist, tmpResult.w * rayDistSqarred, 0, 0) * weight;
			
		}
		resultWeight += weight;
		//Weighted Importance Sampling
	}
	float epsilon = float(rayCount) * 1e-9f;
	float hysteresis = volume.hysteresis;
	
	ivec3 texCoord = get_probe_texel_coords(ivec3(gl_WorkGroupID.xyz), ivec2(gl_WorkGroupSize.xy), volume);
	texCoord.xy += ivec2(gl_LocalInvocationID.xy);

	float weightNormalization = 1.f/ (max(resultWeight, epsilon));

//	if(filterIrradiance)
//		weightNormalization *= 0.5f;

	result *= weightNormalization;
	//result2 *= weightNormalization;

	vec4 previous = vec4(0.f);
	//vec4 previous2 = vec4(0.f);
	uint imageBinding = 0;
	if(filterIrradiance)
		imageBinding = volume.irradianceImageBinding;
	else
		imageBinding = volume.depthImageBinding;
			
	if(imageFormat == R11G11B10F)
		previous = imageLoad(imagesArrayR11G11B10F[imageBinding], texCoord);
	else if(imageFormat == R10G10B10A2F)
		previous = imageLoad(imagesArrayRGB10_A2[imageBinding], texCoord);
	else if(imageFormat == R16G16B16A16F)
		previous = imageLoad(imagesArrayRGBA16F[imageBinding], texCoord);
	else if(imageFormat == R16G16F)
		previous = imageLoad(imagesArrayReadRG16F[imageBinding], texCoord);
	else if(imageFormat == R32G32B32A32F)
		previous = imageLoad(imagesArrayRGBA32F[imageBinding], texCoord);
	else if(imageFormat == E5B9G9R9F)
		previous.xyz = rgb9e5_to_vec3(imageLoad(imagesArrayR32UI[imageBinding], texCoord).x);
		//previous.xyz = rgb9e5_to_vec3(floatBitsToUint(imageLoad(imagesR32F[imageBinding], texCoord).x));
//	if(volume.use6Moments != 0) {
//		if(imageFormat == R16G16B16A16F)
//			previous2 = imageLoad(imagesArrayRGBA16F[volume.depth2ImageBinding], texCoord);
//		else if(imageFormat == R32G32B32A32F)
//			previous2 = imageLoad(imagesArrayRGBA32F[volume.depth2ImageBinding], texCoord);
//	}

	//Recover if we somehow get negativ radiance
	//Shouldn't happen though
	if(dot(previous, previous) <= 0)
		hysteresis = 0.f;

	if(filterIrradiance) {
	
		#undef DO_GAMMA
		#define DO_GAMMA // I don't like it but it converges way faster than otherwise
		#ifdef DO_GAMMA
		result.rgb = pow(result.rgb, vec3(1.f / 5.f));
			
		if (filterIrradiance && (volume.biasedEstimator != 0)){
			biasedResult.rgb = pow(biasedResult.rgb, vec3(1.f / 5.f));
		}
		#endif		

		//MultiscaleMeanEstimator from Ray Tracing Gems
		

//		data.mean = previous.xyz;
//		data.shortMean = data0.x; 
//		data.vbbr = data0.y;
//		data.variance = data1.z;
//		data.inconsistency = data1.w;

		//MultiscaleMeanEstimator(result.xyz, data, 0.08f);
		float blendfactor = 0.f;
		if(usedEstimator == 0) {
			vec4 data0 = imageLoad(imagesArrayRGBA16F[volume.data0ImageBinding], texCoord);
			vec4 data1 = imageLoad(imagesArrayRGBA16F[volume.data1ImageBinding], texCoord);
			MultiscaleMeanEstimatorData data;
			//MultiscaleLuminanceMeanEstimatorData data;

			//data.mean = data2.xyz;
			data.mean = previous.xyz;
			data.shortMean = data0.xyz;
			data.vbbr = data0.w;
			data.variance = data1.xyz;
			data.inconsistency = data1.w;
			if(volume.biasedEstimator == 0) {
				data.mean = previous.xyz;
				blendfactor = MultiscaleMeanEstimator(result.xyz, data, volume.lightToDarkThreshold);
				//MultiscaleLuminanceMeanEstimator(result.xyz, data, volume.lightToDarkThreshold);
				result = vec4(data.mean, 1.f);	
			} else {
				vec4 data2 = imageLoad(imagesArrayRGBA16F[volume.data2ImageBinding], texCoord);
				data.mean = data2.xyz;
				blendfactor = MultiscaleMeanEstimator(biasedResult.xyz, data, volume.lightToDarkThreshold);
				result = vec4(mix(previous.xyz, result.xyz, blendfactor), 1.f);
				imageStore(imagesArrayRGBA16F[volume.data2ImageBinding], texCoord, vec4(data.mean, blendfactor));
			}
			//float blendfactor = MultiscaleMeanEstimator(biasedResult.xyz, data, volume.lightToDarkThreshold);
			//float blendfactor = MultiscaleMeanEstimator(result.xyz, data, volume.lightToDarkThreshold);
			//result = vec4(mix(previous.xyz, result.xyz, blendfactor), 1.f);
			//result = vec4(mix(previous.xyz, biasedResult.xyz, blendfactor), 1.f);

			imageStore(imagesArrayRGBA16F[volume.data0ImageBinding], texCoord, vec4(data.shortMean, data.vbbr));
			imageStore(imagesArrayRGBA16F[volume.data1ImageBinding], texCoord, vec4(data.variance, data.inconsistency));

			//imageStore(imagesArrayRGBA16F[volume.data0ImageBinding], texCoord, vec4(data.shortMean, data.vbbr, data.variance, data.inconsistency));

			if(dynamicRayAllocationEnabled) {
				//float variance = max_component(abs(data.variance));
				//float variance = abs(luminance(data.variance) / max(luminance(data.mean), 1e-6)); //relative Variance
				//float totalBlendFactor = subgroupInclusiveAdd((1.f - blendfactor* blendfactor) * (1.f - blendfactor * blendfactor));//gl_SubgroupID 
				float localRayCountMetric = (1.f - blendfactor* blendfactor) * (1.f - blendfactor * blendfactor);
				//float localRayCountMetric = luminance(abs(data.variance)/ max(data.mean, 1e-6)) *(1.f - blendfactor) * (1.f - blendfactor);// * (1.f - blendfactor * blendfactor);
				//float localRayCountMetric = luminance(abs(data.variance)/ max(data.mean, 1e-6));
				//localRayCountMetric = localRayCountMetric / (localRayCountMetric + 1) *step(1e-6, luminance(abs(biasedResult.xyz)));
				//float localRayCountMetric = luminance(sqrt(abs(data.variance)) / max(data.mean, 1e-6));
				float totalBlendFactor = subgroupInclusiveAdd(localRayCountMetric);//gl_SubgroupID 
				//float totalBlendFactor = subgroupInclusiveAdd(abs(luminance(data.variance) / max(luminance(data.mean), 1e-6)));//gl_SubgroupID 
				if(subgroupElect()) {
					totalBlendFactor = atomicAdd(probeBlendFactor, totalBlendFactor) + totalBlendFactor;
				}
				//Since there's no guarantee that two atomics are executed in order
				barrier();
				if(gl_LocalInvocationIndex == 0)
					writeFloats[volume.dynamicRayBufferBinding].f[(probeCount) * 2 + probeIdx + 1] = totalBlendFactor;
					//writeFloats[volume.dynamicRayBufferBinding].f[(probeCount) * 2 + probeIdx + 1] = probeBlendFactor * inverseTotalProbeSize;
			}
		}
		else if(usedEstimator == 1) {

			//Nearly instant convergence, basically no temporal stability
			//Biased shadow-preserving temporal hysteresis. from GI-1.0
			float l1 = dot(result.xyz, vec3(1.f / 3.f));
			float l2 = dot(previous.xyz, vec3(1.f / 3.f));

			float alpha = max(l1 - l2 - min(l1, l2), 0.f) / max(max(l1, l2), 1e-4f);
			alpha = clamp(alpha, 0.f, 0.95f);
			alpha *= alpha;

			result = vec4(mix(result.xyz, previous.xyz, alpha), 1.f);
		}
		else if(usedEstimator == 2) {
		//Slow convergence, worse temporal stability
		// From the 2021 paper
			vec3 delta = result.xyz - previous.xyz;

			float changeMagnitude = max_component(abs(-delta));
		
			if(changeMagnitude > 0.25)
				hysteresis = max(0.f, hysteresis - 0.15f);

			if(changeMagnitude > 0.8)
				hysteresis = 0.f;
			

			result.rgb = mix(result.rgb, previous.rgb, hysteresis);
			result.a = 1.f;
		}
		else if(usedEstimator == 3) {
		//Slow convergence, worse temporal stability, but different from 2021 paper
		//From RTXGI SDK
			vec3 delta = result.xyz - previous.xyz;
			if(length(delta) > volume.lightToDarkThreshold)
			{
				result.rgb = previous.xyz + (delta * 0.25f);
			}
		
			if(max_component(-delta) > volume.irradianceThreshold)
			{
				hysteresis = max(0.f, hysteresis - 0.75f);
			}


			const float threshold = 1.f / 1024.f;
			vec3 lerpDelta = (1.f - hysteresis) * delta;
			if(max_component(result.xyz) < max_component(previous.xyz))
			{
				lerpDelta = clamp(vec3(threshold), abs(lerpDelta), abs(delta)) * sign(lerpDelta);
			}
			result = vec4(previous.xyz + lerpDelta, 1.0f);
		}
		else if(usedEstimator == 4) {
			//Backup flat hysteresis
			result = vec4(mix(result.xyz, previous.xyz, hysteresis), 1.0f);
		}


//Debug checkerboard pattern
//		result = vec4(0, 0, 0, 1);
//		if((((texCoord.x &0x1) == 1)|| ((texCoord.y &0x1) == 1)) && !(((texCoord.x &0x1) == 1) && ((texCoord.y &0x1) == 1)))
//			result = vec4(1, 1,1,1);
//		if((((gl_WorkGroupID.x &0x1) == 1)|| ((gl_WorkGroupID.y &0x1) == 1)) && !(((gl_WorkGroupID.x &0x1) == 1) && ((gl_WorkGroupID.y &0x1) == 1)))
//			result.xy = vec2(1, 0);
//		if((gl_WorkGroupID.z &0x1) == 1)
//			result.z = 1;
#ifdef DEBUG_COLORS
		result = debugColors[probeIdx % debugColors.length()];
#endif
		//result.xyz = vec3(0.1f);
	}
	else {
		result = vec4(mix(result, previous, hysteresis));
		//result2 = vec4(mix(result2, previous2, hysteresis));
	}

	
	if(imageFormat == R11G11B10F)
		imageStore(imagesArrayR11G11B10F[imageBinding], texCoord, result);
	else if(imageFormat == R10G10B10A2F)
		imageStore(imagesArrayRGB10_A2[imageBinding], texCoord, result);
	else if(imageFormat == R16G16B16A16F)
		imageStore(imagesArrayRGBA16F[imageBinding], texCoord, result);
	else if(imageFormat == R16G16F)
		imageStore(imagesArrayWriteRG16F[imageBinding], texCoord, result);
	else if(imageFormat == R32G32B32A32F)
		imageStore(imagesArrayRGBA32F[imageBinding], texCoord, result);
	else if(imageFormat == E5B9G9R9F)
		imageStore(imagesArrayR32UI[imageBinding], texCoord, uvec4(vec3_to_rgb9e5(result.rgb), 0, 0,0));
		//imageStore(imagesR32F[imageBinding], texCoord, vec4(uintBitsToFloat(vec3_to_rgb9e5(result.rgb)), 0, 0,0));
//	if(volume.use6Moments != 0) {
//		if(imageFormat == R16G16B16A16F)
//			imageStore(imagesArrayRGBA16F[volume.depth2ImageBinding], texCoord, result2);
//		else if(imageFormat == R32G32B32A32F)
//			imageStore(imagesArrayRGBA32F[volume.depth2ImageBinding], texCoord, result2);
//	}
	
}