#version 460

#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_GOOGLE_include_directive : enable
#include "../raycommon.glsl"
#include "../bufferReferences.glsl"
#include "../structs.h"
#include "../bindlessLayouts.glsl"
#include "../common.glsl"

layout(std430, push_constant) uniform PushConstants
{
	uint accBinding;
	uint sceneBinding;
	uint meshBinding;
	uint ddgiBinding;
	uint ddgiCount;
	uint ddgiIndex;
	vec4 col;
	vec4 col2;
} constants;

layout(local_size_x_id = 1) in;
layout(local_size_y_id = 2) in;
layout(local_size_z_id = 3) in;
layout(constant_id = 4) const uint ray_count = 64;
//layout(local_size_x = 64) in;
//layout(local_size_y = 1) in;
//layout(local_size_z = 1) in;

//layout(local_size_x = GroupSizeX, local_size_y = GroupSizeY, local_size_z = GroupSizeZ) in; 
shared vec3 d[ray_count];

void main()
{
	// Ray Query for shadow
	vec3  origin    = vec3(0);
	vec3  direction = vec3(1, 0, 0);  // vector to light
	float tMin      = 0.01f;
	float tMax      = 1000;

	// Initializes a ray query object but does not start traversal
	rayQueryEXT rayQuery;
	//rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, origin, tMin, direction, tMax);

	// Start traversal: return false if traversal is complete
	//while(rayQueryProceedEXT(rayQuery))
	//{
	//}

	// Returns type of committed (true) intersection
	//if(rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionNoneEXT)
	{
	  // Got an intersection == Shadow
	 // o_color *= 0.1;
	}
}