#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "bufferReferences.glsl"
#include "structs.h"
#include "bindlessLayouts.glsl"
#include "common.glsl"
#include "extracts.glsl"
#include "lighting.glsl"
#include "DDGI/ddgi_sampling.glsl"

layout(std430, push_constant) uniform PushConstants
{
    uint accBinding;
	uint sceneBinding;
	uint meshBinding;
    uint ddgiBinding;
    uint ddgiCount;
    uint ddgiIndex;

    uint albedoBinding;
    uint albedoSampler;
    uint normalBinding;
    uint normalSampler;
    uint pbrBinding;
    uint pbrSampler;
    uint depthBinding;
    uint depthSampler;
    uint stencilBinding;
    uint stencilSampler;
    uint diffuseImageBinding;
    uint specularImageBinding;
} constants;
layout(set = 0, binding = 5) uniform accelerationStructureEXT accelerationStructures[ACC_COUNT];

layout(location = 1) rayPayloadEXT float visibility;


float light_visibility(in ShadingData shadingData, in vec3 dir, in float tMax) 
{
    visibility = 0.f;
    uint  rayFlags = gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    float tMin     = 0.01;
	traceRayEXT(accelerationStructures[constants.accBinding], // acceleration structure
            rayFlags,       // rayFlags
            0xFF,           // cullMask
            0,              // sbtRecordOffset
            0,              // sbtRecordStride
            0,              // missIndex
            shadingData.worldPos.xyz + shadingData.shadingNormal * 0.02, // ray origin
            tMin,           // ray min range
            dir.xyz,  // ray direction
            tMax,           // ray max range
            1               // payload (location = 0)
        );
    return visibility;
    //return 1.0f;
}
const float minLight = 1e-5;
void point_lights(in Scene scene, in ShadingData shadingData, inout vec3 diffuse, inout vec3 specular) 
{
    for(int i = 0; i < maxNumPointLights; i++) 
    {
        PointLight light = scene.pointLights[i];
        vec3 lightDir = light.pos.xyz - shadingData.worldPos;
        float dist = length(lightDir);
        if(dist > light.attenuationDistance)
            continue;

        lightDir /= dist;
        float lightShadow = light_visibility(shadingData, lightDir,dist);
        if(lightShadow <= minLight )
            continue;
        //Falloff borrowed from Real Shading in Unreal Engine 4, Brian Karis 2013 SIGGRAPH
        float distRatio = dist / light.attenuationDistance;
        distRatio *= distRatio;
        distRatio *= distRatio;
        float falloff = min(max(1.f - distRatio, 0.0f), 1.0f);
        falloff *= falloff;
        falloff *= 1.f / (dist * dist + 1.f);
        LightData lightData;
        lightData.dir = lightDir;
        lightData.intensity = light.intensity * falloff;
        lightData.color = light.color.rgb;
        calc_light(lightData, shadingData, diffuse, specular);
    }
}

void direct_lighting(in Scene scene, in ShadingData shadingData, out vec3 diffuse, out vec3 specular)
{
    diffuse = vec3(0.f);
    specular = vec3(0.f);
    if(scene.dirLight.enabled > 0) 
    {
        float lightShadow = light_visibility(shadingData, -scene.dirLight.dir, 1e27f);
        //float lightShadow = 1;
        if(lightShadow > minLight) {
            LightData lightData;
            lightData.dir = -scene.dirLight.dir;
            lightData.intensity = scene.dirLight.intensity;
            lightData.color = scene.dirLight.color;
            calc_light(lightData, shadingData, diffuse, specular);
        }
    }
    if(scene.numPointLights > 0)
    {
        point_lights(scene, shadingData, diffuse, specular);
    }
}

void main() 
{    
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

    Scene scene = scenes[constants.sceneBinding].scene;
	DDGIVolume volume = ddgiVolumes[constants.ddgiBinding].volume[constants.ddgiIndex];
	DirectionalLight light = scene.dirLight;
    
    uint stencil = texelFetch( usampler2D(utextures2D[constants.stencilBinding], samplers[constants.stencilSampler]), ivec2(gl_LaunchIDEXT.xy), 0).x;

    if(stencil != 0) {
        vec4 normalTexVal = texture(sampler2D(textures2D[constants.normalBinding], samplers[constants.normalSampler]), inUV);
        vec4 pbr = texture(sampler2D(textures2D[constants.pbrBinding], samplers[constants.pbrSampler]), inUV);
        vec4 albedo = texture(sampler2D(textures2D[constants.albedoBinding], samplers[constants.albedoSampler]), inUV);
        float depth = texture(sampler2D(textures2D[constants.depthBinding], samplers[constants.depthBinding]), inUV).x;
        vec3 normal = decodeOctahedronMapping(unpack1212(normalTexVal.xyz));

        float metalness = pbr.x;
        vec3 F0 = pbr.yzw + vec3(0.022, 0.022, 0.022); //Add 0.022 for e.g. gold
        float roughness = normalTexVal.w;
        vec4 clipSpacePos = vec4(inUV * 2.0 - 1.0, depth, 1.0);
        vec4 viewSpacePos = scene.invProj * clipSpacePos;
        viewSpacePos /= viewSpacePos.w;
        vec4 worldSpacePos = scene.invView * viewSpacePos;

        vec4 diffuseAccum  = vec4(0.0);
        vec4 specularAccum = vec4(0.0);
        ShadingData shadingData;
        shadingData.albedo = albedo.xyz;
        shadingData.alpha = roughness * roughness;
        shadingData.outLightDir = normalize(get_viewer_pos(scene) - worldSpacePos.xyz);
        shadingData.metalness = metalness;
        shadingData.shadingNormal = normal;
        shadingData.worldPos = worldSpacePos.xyz;
        direct_lighting(scene,shadingData, diffuseAccum.xyz, specularAccum.xyz);
        
        if(metalness < 1.f) {
            vec3 irradiance = sample_ddgi(worldSpacePos.xyz, shadingData.shadingNormal, shadingData.shadingNormal, volume);
            vec3 radiance = albedo.xyz * irradiance * (1.f - metalness)*brdf_lambert(); //Use Lambert, might be interesting to investigate other BRDFs with split sum, but probably not worth it
            diffuseAccum.xyz += radiance;
        }
        
        imageStore(imagesR11G11B10F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), diffuseAccum);
        imageStore(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), specularAccum);
    } else {
        imageStore(imagesR11G11B10F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(0));
        imageStore(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(0.2, 0.3, 0.6, 1.0));
    }
}
