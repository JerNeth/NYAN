#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "bufferReferences.glsl"
#include "structs.h"
#include "bindlessLayouts.glsl"
#include "common.glsl"
#include "lighting.glsl"

layout(std430, push_constant) uniform PushConstants
{
    uint accBinding;
	uint sceneBinding;
    uint albedoBinding;
    uint albedoSampler;
    uint normalBinding;
    uint normalSampler;
    uint pbrBinding;
    uint pbrSampler;
    uint depthBinding;
    uint depthSampler;
    uint stencilBinding;
    uint stencilSampler;
    uint diffuseImageBinding;
    uint specularImageBinding;
} constants;
layout(set = 0, binding = 5) uniform accelerationStructureEXT accelerationStructures[ACC_COUNT];

layout(location = 1) rayPayloadEXT float shadowed;

void main() 
{    
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

    Scene scene = scenes[constants.sceneBinding].scene;
	DirectionalLight light1 = scene.dirLight1;
	DirectionalLight light2 = scene.dirLight2;
    
    uint stencil = texelFetch( usampler2D(utextures2D[constants.stencilBinding], samplers[constants.stencilSampler]), ivec2(gl_LaunchIDEXT.xy), 0).x;

    if(stencil != 0) {
        vec4 normalTexVal = texture(sampler2D(textures2D[constants.normalBinding], samplers[constants.normalSampler]), inUV);
        vec4 pbr = texture(sampler2D(textures2D[constants.pbrBinding], samplers[constants.pbrSampler]), inUV);
        vec4 albedo = texture(sampler2D(textures2D[constants.albedoBinding], samplers[constants.albedoSampler]), inUV);
        float depth = texture(sampler2D(textures2D[constants.depthBinding], samplers[constants.depthBinding]), inUV).x;
        vec3 normal = decodeOctahedronMapping(unpack1212(normalTexVal.xyz));

        float metalness = pbr.x;
        vec3 F0 = pbr.yzw + vec3(0.022, 0.022, 0.022); //Add 0.022 for e.g. gold
        float roughness = normalTexVal.w;
        vec4 clipSpacePos = vec4(inUV * 2.0 - 1.0, depth, 1.0);
        vec4 viewSpacePos = scene.invProj * clipSpacePos;
        viewSpacePos /= viewSpacePos.w;
        vec4 worldSpacePos = scene.invView * viewSpacePos;

        vec4 diffuseAccum  = vec4(0.0);
        vec4 specularAccum = vec4(0.0);
        
        vec3 viewPos = vec3(scene.viewerPosX, scene.viewerPosY, scene.viewerPosZ);
        vec3 viewVec = normalize(viewPos - worldSpacePos.xyz);
        if(dot(normal, viewVec) < 0) {
            normal = -normal;
        }
        float NdotL = max(dot(normal, light1.dir), 0.0);
        if(NdotL > 0) {
            
            vec4 diffuse = vec4(0.0);
            vec4 specular= vec4(0.0);
            calcDirLight(albedo.xyz, metalness, roughness, viewVec, normal, light1, specular, diffuse);

            specular.a = albedo.a;
            diffuse.a = albedo.a;
            uint  rayFlags = gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT | gl_RayFlagsTerminateOnFirstHitEXT;
            float tMin     = 0.5 * (1.0 - NdotL);
            float tMax     = 10000.0;
            shadowed = 0.0;
            traceRayEXT(accelerationStructures[constants.accBinding], // acceleration structure
                  rayFlags,       // rayFlags
                  0xFF,           // cullMask
                  0,              // sbtRecordOffset
                  0,              // sbtRecordStride
                  0,              // missIndex
                  worldSpacePos.xyz,     // ray origin
                  tMin,           // ray min range
                  light1.dir,  // ray direction
                  tMax,           // ray max range
                  1               // payload (location = 0)
            );
            

            diffuseAccum += diffuse* shadowed;
            specularAccum += specular* shadowed;
        }
        imageStore(imagesR11G11B10F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), diffuseAccum);
        imageStore(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), specularAccum + diffuseAccum);
    } else {
        imageStore(imagesR11G11B10F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(0));
        imageStore(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(0.2, 0.3, 0.6, 1.0));
    }
}
