#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "bufferReferences.glsl"
#include "structs.h"
#include "formats.h"
#include "hash.glsl"
#include "bindlessLayouts.glsl"
#include "common.glsl"
#include "lighting.glsl"

#include "raytrace_lighting.glsl"

layout(std430, push_constant) uniform PushConstants
{
    uint accBinding;
    uint sceneBinding;
    uint meshBinding;
    uint diffuseImageBinding;
    uint specularImageBinding;
    uint rngSeed;
    uint frameCount;
} constants;
layout(set = 0, binding = 5) uniform accelerationStructureEXT accelerationStructures[ACC_COUNT];

layout(location = 0) rayPayloadEXT PackedPayload pld;
layout(constant_id = 4) const uint maxPathLength = 10;
layout(constant_id = 5) const bool antialiasing = false;

vec3 random_cosine(vec3 direction, inout uint rngSeed)
{
    // Choose random points on the unit sphere offset along the surface normal
    // to produce a cosine distribution of random directions.
    float a = uint_to_u01_float(hash1_mut(rngSeed)) * 3.1415926f * 2.f;
    float z = uint_to_u01_float(hash1_mut(rngSeed)) * 2.f - 1.f;
    float r = sqrt(1.f - z * z);

    vec3 p = vec3(r * cos(a), r * sin(a), z) + direction;
    return normalize(p);
}

void main() 
{
    uint frameCount = max(constants.frameCount, 1);
    float inverseFrameCount = 1.f / frameCount;
    if(inverseFrameCount < 1e-7) {
        return;
    }
    uint rngSeed = hash1(constants.rngSeed + gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x);
    Scene scene = scenes[constants.sceneBinding].scene;
    vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy);
    if(antialiasing)
        pixelCenter += vec2(uint_to_u01_float(hash1_mut(rngSeed)), uint_to_u01_float(hash1_mut(rngSeed))); 
    else
        pixelCenter += vec2(0.5);

    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    const vec2 pixelSize = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin    = scene.invView * vec4(0, 0, 0, 1);
    vec4 target    = scene.invProj * vec4(d.x, d.y, 1, 1);
    target *= target.w;
    vec4 direction = scene.invView * vec4(normalize(target.xyz), 0);
    //direction /= direction.w;
    //direction= normalize(direction);
    //uint  rayFlags = gl_RayFlagsOpaqueEXT;
    uint  rayFlags = gl_RayFlagsNoneEXT;
    float tMin     = 0.001;
    float tMax     = 10000.0;
	vec3 diffuse = vec3(0.f);
	vec3 specular = vec3(0.f);
    vec3 tracedBRDF = vec3(1.f);

    //uint rngSeed = constants.rngSeed;
    
    for(int i = 0; i < maxPathLength; i++) {
        traceRayEXT(accelerationStructures[constants.accBinding], // acceleration structure
                rayFlags,       // rayFlags
                0xFF,           // cullMask
                0,              // sbtRecordOffset
                0,              // sbtRecordStride
                0,              // missIndex
                origin.xyz, // ray origin
                tMin,           // ray min range
                direction.xyz,  // ray direction
                tMax,           // ray max range
                0               // payload (location = 0)
            );
	    Payload payload = unpack_payload(pld);
    

    
        if(payload.hitkind == HitKindMiss) 
	    {
		    diffuse.xyz += payload.albedo * tracedBRDF;
            break;
	    } 
	    else {
            ShadingData shadingData;
            shadingData.albedo = payload.albedo;
            shadingData.alpha = payload.roughness * payload.roughness;
            shadingData.outLightDir = -direction.xyz;
            shadingData.metalness = payload.metallic;
            shadingData.shadingNormal = payload.shadingNormal;
            shadingData.worldPos = payload.worldPos;
            //High compile time here
            //Probable cause was loop end condition in an SSBO
	        vec3 currentDiffuse = vec3(0.f);
	        vec3 currentSpecular = vec3(0.f);
		    diffuse_direct_lighting(accelerationStructures[constants.accBinding], scene, shadingData, currentDiffuse, currentSpecular);
            //currentDiffuse += payload.emissive * (1.f / ((payload.hitT* payload.hitT + 1) * 3.1415926f));
            currentDiffuse += payload.emissive;
            diffuse.xyz += (currentDiffuse + currentSpecular) * tracedBRDF;
            tracedBRDF *= min(payload.albedo, vec3(0.99f));
            if(max(max(tracedBRDF.x, tracedBRDF.y), tracedBRDF.z) < 0.005f)
                break;
            rngSeed += i;
            origin.xyz = shadingData.worldPos + 1e-4 * payload.shadingNormal;
            direction.xyz = random_cosine(shadingData.shadingNormal, rngSeed);
            
        }
    }
//	vec3 diffuseOld = imageLoad(imagesRGBA16F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy)).xyz;
//	vec3 specularOld = imageLoad(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy)).xyz;
	vec3 diffuseOld = imageLoad(imagesRGBA32F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy)).xyz;
	vec3 specularOld = imageLoad(imagesRGBA32F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy)).xyz;

    diffuseOld =  (diffuseOld* (frameCount - 1) + diffuse) * inverseFrameCount;
    specularOld = (specularOld * (frameCount - 1)+ specular) * inverseFrameCount;
    
    
//    imageStore(imagesRGBA16F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(diffuseOld, 1.0));
//    imageStore(imagesRGBA16F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(specularOld, 1.0));
    imageStore(imagesRGBA32F[constants.diffuseImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(diffuseOld, 1.0));
    imageStore(imagesRGBA32F[constants.specularImageBinding], ivec2(gl_LaunchIDEXT.xy), vec4(specularOld, 1.0));
}
