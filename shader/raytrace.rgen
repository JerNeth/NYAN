#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#include "raycommon.glsl"
#include "bufferReferences.glsl"
#include "structs.h"
#include "bindlessLayouts.glsl"
#include "common.glsl"

layout(std430, push_constant) uniform PushConstants
{
    uint accBinding;
    uint sceneBinding;
    uint meshBinding;
    uint imageBinding;
} constants;
layout(set = 0, binding = 5) uniform accelerationStructureEXT accelerationStructures[ACC_COUNT];

layout(location = 0) rayPayloadEXT hitPayload prd;

void main() 
{    
    const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = inUV * 2.0 - 1.0;
    vec4 origin    = scenes[constants.sceneBinding].scene.invView * vec4(0, 0, 0, 1);
    vec4 target    = scenes[constants.sceneBinding].scene.invProj * vec4(d.x, d.y, 1, 1);
    vec4 direction = scenes[constants.sceneBinding].scene.invView * vec4(normalize(target.xyz), 0);
    //uint  rayFlags = gl_RayFlagsOpaqueEXT;
    uint  rayFlags = 0;
    float tMin     = 0.001;
    float tMax     = 10000.0;
    traceRayEXT(accelerationStructures[constants.accBinding], // acceleration structure
          rayFlags,       // rayFlags
          0xFF,           // cullMask
          0,              // sbtRecordOffset
          0,              // sbtRecordStride
          0,              // missIndex
          origin.xyz,     // ray origin
          tMin,           // ray min range
          direction.xyz,  // ray direction
          tMax,           // ray max range
          0               // payload (location = 0)
     );
    imageStore(imagesRGB10_A2[constants.imageBinding], ivec2(gl_LaunchIDEXT.xy), fromLinear(vec4(prd.hitValue, 1.0)));
}
